<?php
// $Id: series.module,v 1.5 2010/07/27 15:20:50 greenskin Exp $

/**
 * @file
 * Provides the ability to tie nodes into series.
 *
 * @author greenSkin
 */

/**
 * Implementation of hook_perm().
 */
function series_perm() {
  return array('view all series', 'edit own series', 'edit any series');
}

/**
 * Implementation of hook_menu().
 */
function series_menu() {
  $items['admin/settings/series'] = array(
    'title' => 'Series',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('series_admin_form'),
    'access arguments' => array('administer series'),
    'file' => 'series.admin.inc'
  );
  $items['node/%series_node/edit/general'] = array(
    'title' => 'General',
    'page callback' => 'node_page_edit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  $items['node/%series_node/edit/series'] = array(
    'title' => 'Series',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('series_node_edit_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'series.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['series'] = array(
    'title callback' => 'series_list_page_title',
    'page callback' => 'views_page',
    'page arguments' => array('series_list', 'default'),
    'access callback' => 'series_views_access',
    'access arguments' => array('series_list', 'default')
  );
  $items['series/%'] = array(
    'title callback' => 'series_nodes_page_title',
    'title arguments' => array(1),
    'page callback' => 'views_page',
    'page arguments' => array('series_nodes', 'default', 1),
    'access callback' => 'series_views_access',
    'access arguments' => array('series_list', 'default'),
    'type' => MENU_CALLBACK
  );
  $items['series/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' -10
  );
  $items['series/%series/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('series_edit_form', 1),
    'access callback' => 'series_access',
    'access arguments' => array('update', 1),
    'file' => 'series.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function series_form_alter(&$form, &$form_state, $form_id) {
  // Ensure this is a node form.
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    // Ensure this node type is using the series vocabulary.
    $vocabulary = taxonomy_vocabulary_load(variable_get('series_vid', 0));
    if ($vocabulary && in_array($form['type']['#value'], $vocabulary->nodes)) {
      // If series query string exists, set the series input and disable it so
      // it can't be changed.
      if (isset($_REQUEST['series']) && is_numeric($_REQUEST['series'])) {
        $term = taxonomy_get_term($_REQUEST['series']);
        if ($term && $term->vid == $vocabulary->vid) {
          if (isset($form['taxonomy']['tags']) && isset($form['taxonomy']['tags'][$term->vid])) {
            $element = &$form['taxonomy']['tags'][$term->vid];
            $element['#value'] = $term->name;
            $element['#disabled'] = TRUE;
            unset($element['#autocomplete_path']);
          }
          else if (isset($form['taxonomy'][$term->vid])) {
            $element = &$form['taxonomy'][$term->vid];
            $element['#value'] = $term->tid;
            $element['#disabled'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function series_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  if ($form['vid']['#value'] == variable_get('series_vid', 0)) {
    $form['settings']['#description'] = t('This vocabulary is chosen as the !link, and as such the multiple select field have been disabled.', array('!link' => l(t('Series vocabulary'), 'admin/settings/series')));
    $form['settings']['multiple']['#type'] = 'hidden';
    $form['settings']['multiple']['#value'] = 0;
    $form['#submit'][] = 'series_taxonomy_form_vocabulary_submit';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function series_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      // Set redirect destination.
      $vid = variable_get('series_vid', 0);
      if (isset($node->taxonomy['tags']) && isset($node->taxonomy['tags'][$vid])) {
        $terms = taxonomy_get_term_by_name($node->taxonomy['tags'][$vid]);
        foreach ($terms as $term) {
          if ($term->vid == $vid) {
            $tid = $term->tid;
          }
        }
      }
      else if (isset($node->taxonomy[$vid])) {
        $tid = $node->taxonomy[$vid];
      }

      // Determine if there was a former series the node was tied to.
      $former_tid = db_result(db_query("SELECT tid FROM {series_weight} WHERE nid = %d", $node->nid));

      if (isset($tid) && $tid != NULL) {
        if ($tid != $former_tid) {
          // Delete the node weight for the former series.
          db_query("DELETE FROM {series_weight} WHERE nid = %d", $node->nid);

          // Clear the caches for both series.
          cache_clear_all('series:'. $former_tid, 'cache_series');
          cache_clear_all('series:'. $tid, 'cache_series');
        }

        // $form_state['redirect'] does not work here since the node module
        // forces a redirect back to the node view page, however the
        // destination query redirect works so we use that.
        $_REQUEST['destination'] = 'node/'. $node->nid .'/edit/series';
      }
      else if ($former_tid) {
        // The node no longer is tied to a series.
        db_query("DELETE FROM {series_weight} WHERE nid = %d", $node->nid);

        // Clear the cache for the former series.
        cache_clear_all('series:'. $former_tid, 'cache_series');
      }
      break;
    case 'view':
      // If we are not a teaser show applicable next/previous links to other
      // nodes in this nodes series.
      if ($a3 == FALSE) {
        if ($series = series_load($node)) {
          $node->content['series'] = array(
            '#theme' => 'series_content',
            '#weight' => 1
          );

          // Determine the current placing of the node in the series.
          $current = 1;
          foreach ($series->nodes as $value) {
            if ($value['nid'] == $node->nid) break;
            $current++;
          }

          // Series information
          $node->content['series']['information'] = array(
            'title' => array(
              '#value' => theme('series_title', $series)
            ),
            'current' => array(
              '#value' => $current
            ),
            'total' => array(
              '#value' => count($series->nodes)
            )
          );

          // Series navigation
          list($prev, $next) = series_navigation_links($series, $node);
          if ($prev) {
            $prev_node = node_load($prev['nid']);
            if (node_access('view', $prev_node)) {
              $node->content['series']['navigation']['previous'] = array(
                '#value' => theme('series_navigation_previous', $prev['nid']),
                '#weight' => -1
              );
            }
          }
          if ($next) {
            $next_node = node_load($next['nid']);
            if (node_access('view', $next_node)) {
              $node->content['series']['navigation']['next'] = array(
                '#value' => theme('series_navigation_next', $next['nid']),
                '#weight' => 1
              );
            }
          }

          if (isset($node->content['series']['navigation'])) {
            // Theme the series navigation.
            $node->content['series']['navigation']['#theme'] = 'series_navigation';
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function series_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Series navigation')
      );
      return $blocks;
    case 'view':
      if ($delta == 0) {
        if (arg(0) == 'series' && is_numeric(arg(1))) {
          $series = series_load(arg(1));
        }
        if (!isset($series) || !$series) {
          if ($node = menu_get_object()) {
            $series = series_load($node);
          }
        }

        if (isset($series) && $series) {
          $block['subject'] = check_plain($series->name);
          $items = array();
          foreach ($series->nodes as $node) {
            $items[] = l($node['title'], 'node/'. $node['nid']);
          }
          $block['content'] = theme('item_list', $items, NULL, 'ol');
          return $block;
        }
      }
  }
}

/**
 * Implementation of hook_theme().
 */
function series_theme() {
  return array(
    'series_edit_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'series_create_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'views_view_fields__series_list' => array(
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-fields--series-list',
      'original hook' => 'views_view_fields',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_fields',
        'series_preprocess_views_view_fields__series_list'
      ),
      'path' => drupal_get_path('module', 'series') .'/views/theme'
    ),
    'series_content' => array(
      'arguments' => array('element' => NULL)
    ),
    'series_information_title' => array(
      'arguments' => array('series' => NULL)
    ),
    'series_navigation' => array(
      'arguments' => array('element' => NULL)
    ),
    'series_navigation_next' => array(
      'arguments' => array('nid' => NULL)
    ),
    'series_navigation_previous' => array(
      'arguments' => array('nid' => NULL)
    )
  );
}

function series_preprocess_views_view_fields__series_list(&$variables) {
  drupal_add_css(drupal_get_path('module', 'series') .'/css/series.css');

  $variables['series_url'] = url('series/'. $variables['rows']->tid);

  $title = (isset($variables['rows']->term_data_name)) ? $variables['rows']->term_data_name : '';
  $variables['title'] = check_plain($title);
}

/**
 * Implementation of hook_flush_caches().
 */
function series_flush_caches() {
  return array('cache_series');
}

/**
 * Implementation of hook_views_api().
 */
function series_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'series') .'/views'
  );
}

function series_list_page_title() {
  $vid = variable_get('series_vid', 0);
  if ($vid > 0) {
    if ($vocabulary = taxonomy_vocabulary_load($vid)) {
      return $vocabulary->name;
    }
  }
}

function series_nodes_page_title($tid) {
  $series = series_load($tid);
  return $series->name;
}

function series_access($op, $series, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'view':
      return user_access('view all series', $account);
    case 'update':
      static $update = array();

      if (user_access('edit any series', $account)) {
        return TRUE;
      }

      if (!isset($update[$series->tid][$account->uid])) {
        // Default access to false.
        $update[$series->tid][$account->uid] = FALSE;

        if (user_access('edit own series', $account)) {
          // Look to see if the account has created a node within this series.
          foreach ($series->nodes as $node) {
            $uid = db_result(db_rewrite_sql('SELECT n.uid FROM {node} AS n WHERE n.nid = %d', $node['nid']));
            if ($uid == $account->uid) {
              $update[$series->tid][$account->uid] = TRUE;
              break;
            }
          }
        }
      }

      return $update[$series->tid][$account->uid];
  }
}

function series_views_access($name, $display_id) {
  if ($view = views_get_view($name)) {
    $view->init_display();
    $args = $view->display[$display_id]->handler->get_access_plugin()->get_access_callback();
    return call_user_func_array('views_access', $args);
  }
}

function series_node_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (isset($node->type)) {
    $vocabulary = taxonomy_vocabulary_load(variable_get('series_vid', 0));
    if ($vocabulary && in_array($node->type, $vocabulary->nodes)) {
      if ($series = series_load($node)) {
        return $node;
      }
    }
  }
  return FALSE;
}

function series_load($param) {
  static $series = array();

  if (is_object($param)) {
    // Only node objects.
    if (isset($param->nid) && $param->nid > 0) {
      if (!isset($series['node'][$param->nid])) {
        $series['node'][$param->nid] = _series_load_node_series($param);
      }
      return $series['node'][$param->nid];
    }
    return FALSE;
  }

  $tid = $param;
  if (!isset($series['term'][$tid])) {
    // Grab cached if exists.
    if ($cache = cache_get('series:'. $tid, 'cache_series')) {
      $term_series = $cache->data;
    }
    else {
      $term_series = taxonomy_get_term($tid);

      if (!empty($term_series)) {
        // Build array of nodes tied to this series.
        $term_series->nodes = array();
        $result = series_select_nodes($tid);
        while ($data = db_fetch_array($result)) {
          if (!is_numeric($data['weight'])) {
            // The node hasn't yet been given a set weight so we give it a temp
            // weight that equals the number of nodes currently in the series
            // object.
            $data['weight'] = count($term_series->nodes);
          }
          $term_series->nodes[$data['nid']] = $data;
        }

        // Sort the nodes by weight.
        uasort($term_series->nodes, 'series_sort');

        // Save to cache.
        cache_set('series:'. $tid, $term_series, 'cache_series');
      }
      else {
        $term_series = FALSE;
      }
    }

    $series['term'][$tid] = $term_series;
  }
  return $series['term'][$tid];
}

function series_taxonomy_form_vocabulary_submit($form, &$form_state) {
  cache_clear_all('*', 'cache_series');
}

function series_navigation_links($series, $node) {
  // Ensure the pointer is at the beginning of the array.
  reset($series->nodes);

  $current = current($series->nodes);

  // Loop through the series nodes, moving the array pointer 'till we find the
  // requested node.
  while ($current && $current['nid'] != $node->nid) {
    $current = next($series->nodes);
  }

  // Move the array pointer back one to assign the previous node.
  $prev = prev($series->nodes);
  // Move the array pointer ahead one again to the current node. If there was
  // not a previous element in the array, we do not need to use next() to
  // return to the current position instead we reset().
  ($prev) ? next($series->nodes) : reset($series->nodes);
  // Move the array pointer ahead one more to assign the next node.
  $next = next($series->nodes);

  return array($prev, $next);
}

/**
 * Gets the series vocabulary tree.
 */
function series_get_tree() {
  $vid = variable_get('series_vid', 0);
  if ($vid > 0) {
    return taxonomy_get_tree($vid, 0, -1, 1);
  }
  return FALSE;
}

function series_select_nodes($tid) {
  $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created, n.type, sw.weight FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid LEFT JOIN {series_weight} sw ON n.nid = sw.nid AND tn.tid = sw.tid WHERE tn.tid = %d ORDER BY sw.weight, n.title';
  $sql = db_rewrite_sql($sql);
  return db_query($sql, array($tid));
}

/**
 * Helper function to sort nodes within a series.
 */
function series_sort($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

function _series_load_node_series($node) {
  if ($vid = variable_get('series_vid', 0)) {
    if (isset($node->taxonomy)) {
      // Process terms differently based on if terms have been converted
      // after a preview.
      if (is_array(current($node->taxonomy))) {
        return series_load($node->taxonomy[$vid]);
      }
      else {
        foreach ($node->taxonomy as $term) {
          if ($term->vid == $vid) {
            return series_load($term->tid);
          }
        }
      }
    }
  }
}

function theme_series_content($element) {
  $output = drupal_render($element['information']);
  if (isset($element['navigation'])) {
    $output .= drupal_render($element['navigation']);
  }
  $output .= drupal_render($element);
  return $output;
}

function theme_series_information_title($series) {
  return '<h4 class="series_title">'. l($series->name, 'series/'. $series->tid, array('attributes' => array('title' => t('View the entire series: %name', array('%name' => $series->name))))) .'</h4>';
}

function theme_series_navigation($element) {
  drupal_add_css(drupal_get_path('module','series') .'/css/series_nav.css');

  $output = '<div class="series_navigation">';
  $output .= '<div class="previous">'. drupal_render($element['previous']) .'</div>';
  $output .= '<div class="next">'. drupal_render($element['next']) .'</div>';
  $output .= drupal_render($element);
  $output .= '</div>';
  return $output;
}

function theme_series_navigation_next($nid) {
  return l(t('Next'), 'node/'. $nid);
}

function theme_series_navigation_previous($nid) {
  return l(t('Previous'), 'node/'. $nid);
}
